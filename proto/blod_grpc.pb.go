// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.5
// source: proto/blod.proto

package blodBank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlodBankService_RegisterConfig_FullMethodName = "/blodBank.BlodBankService/RegisterConfig"
	BlodBankService_GetConfig_FullMethodName      = "/blodBank.BlodBankService/GetConfig"
	BlodBankService_ListAllConfig_FullMethodName  = "/blodBank.BlodBankService/ListAllConfig"
	BlodBankService_DeleteConfig_FullMethodName   = "/blodBank.BlodBankService/DeleteConfig"
	BlodBankService_UpdateConfig_FullMethodName   = "/blodBank.BlodBankService/UpdateConfig"
)

// BlodBankServiceClient is the client API for BlodBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Blod(Config) Bank Service
type BlodBankServiceClient interface {
	RegisterConfig(ctx context.Context, in *ConfigItem, opts ...grpc.CallOption) (*Status, error)
	GetConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*ConfigItem, error)
	ListAllConfig(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConfigItem], error)
	DeleteConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*Status, error)
	UpdateConfig(ctx context.Context, in *ConfigItem, opts ...grpc.CallOption) (*Status, error)
}

type blodBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlodBankServiceClient(cc grpc.ClientConnInterface) BlodBankServiceClient {
	return &blodBankServiceClient{cc}
}

func (c *blodBankServiceClient) RegisterConfig(ctx context.Context, in *ConfigItem, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, BlodBankService_RegisterConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blodBankServiceClient) GetConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*ConfigItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigItem)
	err := c.cc.Invoke(ctx, BlodBankService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blodBankServiceClient) ListAllConfig(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConfigItem], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlodBankService_ServiceDesc.Streams[0], BlodBankService_ListAllConfig_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NoParam, ConfigItem]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlodBankService_ListAllConfigClient = grpc.ServerStreamingClient[ConfigItem]

func (c *blodBankServiceClient) DeleteConfig(ctx context.Context, in *ConfigID, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, BlodBankService_DeleteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blodBankServiceClient) UpdateConfig(ctx context.Context, in *ConfigItem, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, BlodBankService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlodBankServiceServer is the server API for BlodBankService service.
// All implementations must embed UnimplementedBlodBankServiceServer
// for forward compatibility.
//
// Blod(Config) Bank Service
type BlodBankServiceServer interface {
	RegisterConfig(context.Context, *ConfigItem) (*Status, error)
	GetConfig(context.Context, *ConfigID) (*ConfigItem, error)
	ListAllConfig(*NoParam, grpc.ServerStreamingServer[ConfigItem]) error
	DeleteConfig(context.Context, *ConfigID) (*Status, error)
	UpdateConfig(context.Context, *ConfigItem) (*Status, error)
	mustEmbedUnimplementedBlodBankServiceServer()
}

// UnimplementedBlodBankServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlodBankServiceServer struct{}

func (UnimplementedBlodBankServiceServer) RegisterConfig(context.Context, *ConfigItem) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConfig not implemented")
}
func (UnimplementedBlodBankServiceServer) GetConfig(context.Context, *ConfigID) (*ConfigItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedBlodBankServiceServer) ListAllConfig(*NoParam, grpc.ServerStreamingServer[ConfigItem]) error {
	return status.Errorf(codes.Unimplemented, "method ListAllConfig not implemented")
}
func (UnimplementedBlodBankServiceServer) DeleteConfig(context.Context, *ConfigID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedBlodBankServiceServer) UpdateConfig(context.Context, *ConfigItem) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedBlodBankServiceServer) mustEmbedUnimplementedBlodBankServiceServer() {}
func (UnimplementedBlodBankServiceServer) testEmbeddedByValue()                         {}

// UnsafeBlodBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlodBankServiceServer will
// result in compilation errors.
type UnsafeBlodBankServiceServer interface {
	mustEmbedUnimplementedBlodBankServiceServer()
}

func RegisterBlodBankServiceServer(s grpc.ServiceRegistrar, srv BlodBankServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlodBankServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlodBankService_ServiceDesc, srv)
}

func _BlodBankService_RegisterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlodBankServiceServer).RegisterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlodBankService_RegisterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlodBankServiceServer).RegisterConfig(ctx, req.(*ConfigItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlodBankService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlodBankServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlodBankService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlodBankServiceServer).GetConfig(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlodBankService_ListAllConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlodBankServiceServer).ListAllConfig(m, &grpc.GenericServerStream[NoParam, ConfigItem]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlodBankService_ListAllConfigServer = grpc.ServerStreamingServer[ConfigItem]

func _BlodBankService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlodBankServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlodBankService_DeleteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlodBankServiceServer).DeleteConfig(ctx, req.(*ConfigID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlodBankService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlodBankServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlodBankService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlodBankServiceServer).UpdateConfig(ctx, req.(*ConfigItem))
	}
	return interceptor(ctx, in, info, handler)
}

// BlodBankService_ServiceDesc is the grpc.ServiceDesc for BlodBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlodBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blodBank.BlodBankService",
	HandlerType: (*BlodBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterConfig",
			Handler:    _BlodBankService_RegisterConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _BlodBankService_GetConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _BlodBankService_DeleteConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _BlodBankService_UpdateConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAllConfig",
			Handler:       _BlodBankService_ListAllConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/blod.proto",
}
